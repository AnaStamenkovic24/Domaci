package rs.itbootcamp.dao;

import rs.itbootcamp.model.FoodModel;

import java.util.List;

public interface FoodDao {
    void insert(FoodModel fm);

    void addToMeal(int mealID, int foodId, double mass);

    void delete(int id);

    void update(FoodModel fm);

    FoodModel getFood(int id);

    List<FoodModel> getAllFood();
}

package rs.itbootcamp.dao;

import rs.itbootcamp.database.DatabaseConnection;
import rs.itbootcamp.model.FoodModel;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class FoodDaoSQL implements FoodDao {

    private static final Connection conn = DatabaseConnection.getConnection();

    @Override
    public void insert(FoodModel fm) {

        try {
            PreparedStatement st = conn.prepareStatement("INSERT INTO food " +
                    "VALUES (?,?,?,?,?,?)");
            st.setInt(1, fm.getFoodId());
            st.setString(2, fm.getFoodName());
            st.setDouble(3, fm.getFoodKcal());
            st.setDouble(4, fm.getFoodProteins());
            st.setDouble(5, fm.getFoodCarbohydrates());
            st.setDouble(6, fm.getFoodFat());
            st.executeUpdate();
            st.close();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    @Override
    public void addToMeal(int mealID, int foodId, double mass) {
        try {
            PreparedStatement st = conn.prepareStatement("INSERT INTO mealfood VALUES(?, ?, ?)");
            st.setInt(1, mealID);
            st.setInt(2, foodId);
            st.setDouble(3, mass);
            st.executeUpdate();
            st.close();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(int id) {
        try {
            PreparedStatement st = conn.prepareStatement("DELETE FROM food WHERE food_id = ?");
            st.setInt(1, id);
            st.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void update(FoodModel fm) {
        try {
            PreparedStatement st = conn.prepareStatement("UPDATE food " +
                    "SET food_id = ?, " +
                    "food_name = ?, " +
                    "food_kcal = ?, " +
                    "food_proteins = ?, " +
                    "food_carbs = ?, " +
                    "food_fat = ?, " +
                    "WHERE food_id = ?");
            st.setInt(1, fm.getFoodId());
            st.setString(2, fm.getFoodName());
            st.setDouble(3, fm.getFoodKcal());
            st.setDouble(4, fm.getFoodProteins());
            st.setDouble(5, fm.getFoodCarbohydrates());
            st.setDouble(6, fm.getFoodFat());
            st.setInt(7, fm.getFoodId());
            st.executeUpdate();
            st.close();
        } catch (SQLException throwables) {
            throwables.printStackTrace();
        }
    }

    @Override
    public FoodModel getFood(int id) {
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM food WHERE food_id = " + id);
            rs.next();
            FoodModel fm = new FoodModel(
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getDouble(3),
                    rs.getDouble(4),
                    rs.getDouble(5),
                    rs.getDouble(6));
            return fm;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<FoodModel> getAllFood() {
        List<FoodModel> foodList = new ArrayList<>();
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM food");
            while (rs.next()) {
                FoodModel fm = new FoodModel(
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getDouble(3),
                        rs.getDouble(4),
                        rs.getDouble(5),
                        rs.getDouble(6));
                foodList.add(fm);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return foodList;
    }
}

package rs.itbootcamp.dao;

import rs.itbootcamp.model.FoodModel;
import rs.itbootcamp.model.MealModel;

import java.util.List;

public interface MealDao {
    void insert(MealModel mm);

    void delete(int id);

    void update(MealModel mm);

    MealModel getMeal(int id);

    List<MealModel> getAllMeals();

    List<String> getFoodMealNames(int mealId);

    List<FoodModel> getFoodMeal(int mealId); // Сва храна за јело са id = meal_id
}

package rs.itbootcamp.dao;

import rs.itbootcamp.database.DatabaseConnection;
import rs.itbootcamp.model.FoodModel;
import rs.itbootcamp.model.MealModel;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class MealDaoSQL implements MealDao {
    private static final Connection conn = DatabaseConnection.getConnection();
    static PreparedStatement st;

    @Override
    public void insert(MealModel mm) {
        try {
            PreparedStatement st = conn.prepareStatement("INSERT INTO meal VALUES(?, ?, ?, ?)");
            st.setInt(1, mm.getMealId());
            st.setString(2, mm.getMealName());
            st.setString(3, mm.getMealDesc());
            st.setString(4, mm.getMealDificulty());
            st.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void delete(int id) {
        try {
            st = conn.prepareStatement("DELETE FROM meal WHERE meal_id = ?");
            st.setInt(1, id);
            st.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void update(MealModel mm) {
        try {
            st = conn.prepareStatement("UPDATE meal" +
                    " SET meal_name = ?," +
                    " meal_desc = ?, " +
                    "meal_difficulty = ? " +
                    "WHERE meal_id = ?");

            st.setString(1, mm.getMealName());
            st.setString(2, mm.getMealDesc());
            st.setString(3, mm.getMealDificulty());
            st.setInt(4, mm.getMealId());
            st.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public MealModel getMeal(int id) {
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM meal WHERE meal_id = " + id);
            rs.next();
            MealModel mm = new MealModel(
                    rs.getInt(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4));
            return mm;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    @Override
    public List<MealModel> getAllMeals() {
        List<MealModel> mealList = new ArrayList<>();
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM meal");
            while (rs.next()) {
                MealModel mm = new MealModel(
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getString(3),
                        rs.getString(4));
                mealList.add(mm);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return mealList;
    }

    @Override
    public List<String> getFoodMealNames(int mealId) {
        List<String> foodNameList = new ArrayList<>();
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT food_name FROM food f" +
                    " INNER JOIN mealfood mf ON f.food_id = mf.food_id" +
                    " WHERE meal_id = " + mealId);
            while (rs.next()) {
                foodNameList.add(rs.getString(1));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return foodNameList;
    }

    @Override
    public List<FoodModel> getFoodMeal(int mealId) {
        List<FoodModel> foodList = new ArrayList<>();
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM food f" +
                    " INNER JOIN mealfood mf ON f.food_id = mf.food_id" +
                    " WHERE meal_id = " + mealId);
            while (rs.next()) {
                FoodModel fm = new FoodModel(
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getDouble(3),
                        rs.getDouble(4),
                        rs.getDouble(5),
                        rs.getDouble(6));
                foodList.add(fm);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return foodList;
    }
}

package rs.itbootcamp.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DatabaseConnection {
    private static Connection conn = null;

    static {
        String url = "jdbc:postgresql://localhost:5432/novo?user=postgres&password=bipbap24";
        try {
            conn = DriverManager.getConnection(url);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public static Connection getConnection() {
        return conn;
    }
}

package rs.itbootcamp.model;
public class FoodModel {
    private int foodId;
    private String foodName;
    private double foodKcal, foodProteins, foodCarbohydrates, foodFat;

    public FoodModel(int foodId, String foodName, double foodKcal, double foodProteins, double foodCarbohydrates, double foodFat) {
        this.foodId = foodId;
        this.foodName = foodName;
        this.foodKcal = foodKcal;
        this.foodProteins = foodProteins;
        this.foodCarbohydrates = foodCarbohydrates;
        this.foodFat = foodFat;
    }

    public int getFoodId() {
        return foodId;
    }

    public void setFoodId(int foodId) {
        this.foodId = foodId;
    }

    public String getFoodName() {
        return foodName;
    }

    public void setFoodName(String foodName) {
        this.foodName = foodName;
    }

    public double getFoodKcal() {
        return foodKcal;
    }

    public void setFoodKcal(double foodKcal) {
        this.foodKcal = foodKcal;
    }

    public double getFoodProteins() {
        return foodProteins;
    }

    public void setFoodProteins(double foodProteins) {
        this.foodProteins = foodProteins;
    }

    public double getFoodCarbohydrates() {
        return foodCarbohydrates;
    }

    public void setFoodCarbohydrates(double foodCarbohydrates) {
        this.foodCarbohydrates = foodCarbohydrates;
    }

    public double getFoodFat() {
        return foodFat;
    }

    public void setFoodFat(double foodFat) {
        this.foodFat = foodFat;
    }
}

package rs.itbootcamp.model;
public class MealModel {
    private int mealId;
    private String mealName, mealDesc, mealDificulty;

    public MealModel(int mealId, String mealName, String mealDesc, String mealDificulty) {
        this.mealId = mealId;
        this.mealName = mealName;
        this.mealDesc = mealDesc;
        this.mealDificulty = mealDificulty;
    }

    public int getMealId() {
        return mealId;
    }

    public void setMealId(int mealId) {
        this.mealId = mealId;
    }

    public String getMealName() {
        return mealName;
    }

    public void setMealName(String mealName) {
        this.mealName = mealName;
    }

    public String getMealDesc() {
        return mealDesc;
    }

    public void setMealDesc(String mealDesc) {
        this.mealDesc = mealDesc;
    }

    public String getMealDificulty() {
        return mealDificulty;
    }

    public void setMealDificulty(String mealDificulty) {
        this.mealDificulty = mealDificulty;
    }

    @Override
    public String toString() {
        return "Meal name: " + mealName;
    }
}

package rs.itbootcamp.model;

import rs.itbootcamp.dao.FoodDao;
import rs.itbootcamp.dao.FoodDaoSQL;
import java.util.Scanner;

public class Test {
    private static FoodModel userNewFood() {
        Scanner sc = new Scanner(System.in);

        System.out.println("Unesite id: ");
        int id = sc.nextInt();
        System.out.println("Unesite name: ");
        String name = sc.next();
        System.out.println("Unesite kcal: ");
        double kcal = sc.nextDouble();
        System.out.println("Unesite proteine: ");
        double proteins = sc.nextDouble();
        System.out.println("Unesite UH: ");
        double carbs = sc.nextDouble();
        System.out.println("Unesite masti: ");
        double fats = sc.nextDouble();
        return new FoodModel(id, name, kcal, proteins, carbs, fats);
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        FoodDao fd = new FoodDaoSQL();

        String menu = """
                0. Exit
                1. Dodaj u tabelu Food
                2. Prikazi tabelu Food
                """;

        int choice = 5;
        while (choice != 0) {
            System.out.println(menu);
            choice = sc.nextInt();
            switch (choice) {
                case 0:
                    break;
                case 1:
                    fd.insert(userNewFood());
                    break;
                case 2:
                    System.out.println(fd.getAllFood());
                    break;
            }
        }

    }
}

