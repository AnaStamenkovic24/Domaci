package Pokemon;

interface Attackable {

    String wins();
    String losesFrom();
    String defend();
    String attack();
    
}

package Pokemon;


public class FirePokemon extends Pokemon{
    public FirePokemon(String s, int i) {
        this.name = s;
        this.health = i;
    }
    public String logAll() {
        return attack().toString()
                + defend().toString()
                + wins().toString()
                + losesFrom().toString();
    }

    @Override
    public String attack() {
        return name + " attacks the enemy with fire!";
    }

    @Override
    public String defend() {
        return name + " defends himself physically";
    }

    @Override
    public String wins() {
        return name + " wins GrassPokemon!";
    }

    @Override
    public String losesFrom() {
        return name + " loses from WaterPokemon!";
    }
    // Napada: Vatrom
    // Brani se: Telesno
    // Pobedjuje: Grass type
    // Gubi od: Water type
}
package Pokemon;

public class GrassPokemon extends Pokemon {
    public GrassPokemon(String s, int i) {
        this.name = s;
        this.health = i;
    }
    public String logAll() {
        return attack().toString()
                + defend().toString()
                + wins().toString()
                + losesFrom().toString();
    }

    @Override
    public String attack() {
        return name + " attacks the enemy with grass!";
    }

    @Override
    public String defend() {
        return name + " defends himself by avoiding!";
    }

    @Override
    public String wins() {
        return name + " wins WaterPokemon!";
    }

    @Override
    public String losesFrom() {
        return name + " loses from FirePokemon!";
    }


    // Napada: Travom
    // Brani se: Izbegava
    // Pobedjuje: Water type
    // Gubi od: Fire type

}

package Pokemon;
//Dopuniti proslednjene klase na odgovarajuci nacin.
//Napraviti interfejs sa 4 metode koje vracaju String
public abstract class Pokemon implements Attackable{
    String name;
    String type;
    int health;

    public Pokemon(String name, String type, int health) {
        this.name = name;
        this.type = type;
        this.health = health;
    }

    public Pokemon() {
    }

    public abstract String logAll(); //Ispisuje kako pokemon napada, kako se brani, koga pobedjuje i od koga gubi


}

package Pokemon;

public class Test {

    public static void main(String[] args) {
        FirePokemon charizard = new FirePokemon("Charizard", 100);
        Pokemon bulbasaur = new GrassPokemon("Bulbasaur", 50);
        WaterPokemon lapras = new WaterPokemon("Lapras", 120);
        System.out.println(charizard.attack());
        System.out.println(bulbasaur.defend());
        System.out.println(lapras.logAll());
    }
}

package Pokemon;

public class WaterPokemon extends Pokemon {
    public WaterPokemon(String s, int i) {
        this.name = s;
        this.health = i;
    }

    public String logAll() {
        return attack().toString()
                + defend().toString()
                + wins().toString()
                + losesFrom().toString();
    }

    @Override
    public String attack() {
        return name + " attacks the enemy with water!";
    }

    @Override
    public String defend() {
        return name + " defends himself with water!";
    }

    @Override
    public String wins() {
        return name + " wins FirePokemon!";
    }

    @Override
    public String losesFrom() {
        return name + " loses from GrassPokemon!";
    }
    // Napada: Vodom
    // Brani se: Vodom
    // Pobedjuje: Fire type
    // Gubi od: Grass type
}
